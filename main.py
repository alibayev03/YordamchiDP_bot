import os
import requests
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# üîë –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# NEW: –¢–≤–æ–π user_id (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ /stats). –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π!
ADMIN_USER_ID = 293349337  # –ü–æ–ª—É—á–∏ —á–µ—Ä–µ–∑ @userinfobot

# üåê URL OpenRouter
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"

# üìö –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
LANGUAGES = {
    "ru": {
        "greeting":
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê—Å–∞–ª, —Ç–≤–æ–π –ò–ò-–±–æ—Ç –Ω–∞ OpenRouter ü§ñ.",
        "response_error":
        "–û—à–∏–±–∫–∞: —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
        "language_set":
        "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –†—É—Å—Å–∫–∏–π",
        "system_prompt":
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ê—Å–∞–ª. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "help_text":
        "–Ø –ê—Å–∞–ª, —Ç–≤–æ–π –ò–ò-–±–æ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ—ë–º —è–∑—ã–∫–µ."
    },
    "uz": {
        "greeting":
        "Salom! Men Asal, OpenRouter tomonidan ishlaydigan AI botman ü§ñ.",
        "response_error":
        "Xato: nimadir noto'g'ri bo'ldi. Qayta urinib ko'ring!",
        "language_set":
        "Til o'rnatildi: O'zbek",
        "system_prompt":
        "Siz Asal ismli do'stona Telegram botisiz. O'zbek tilida javob bering.",
        "help_text":
        "Men Asal, sizning AI botingiz! Tilni tanlash uchun /start buyrug'ini ishlating yoki shunchaki yozing, men sizning tilingizda javob beraman."
    },
    "en": {
        "greeting":
        "Hello! I'm Asal, your AI bot powered by OpenRouter ü§ñ.",
        "response_error":
        "Error: something went wrong. Try again!",
        "language_set":
        "Language set: English",
        "system_prompt":
        "You are a friendly Telegram bot named Asal. Respond in English.",
        "help_text":
        "I'm Asal, your AI bot! Use /start to choose a language or just write to me, and I'll respond in your language."
    }
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_active_date TEXT
        )
    ''')
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, first_active_date) VALUES (?, ?)',
        (user_id, datetime.now().isoformat()))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_user_count():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users')
    count = cursor.fetchone()[0]
    conn.close()
    return count


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)

    keyboard = [[
        InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz"),
        InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    greeting = (f"{LANGUAGES['ru']['greeting']}\n"
                f"{LANGUAGES['uz']['greeting']}\n"
                f"{LANGUAGES['en']['greeting']}\n\n"
                "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Tilni tanlang / Choose a language:")

    await update.message.reply_text(greeting, reply_markup=reply_markup)
    context.user_data["chat_history"] = []


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    add_user(user_id)

    lang = query.data.split("_")[1]
    context.user_data["language"] = lang

    await query.message.reply_text(LANGUAGES[lang]["language_set"])
    await query.message.delete()


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("language", "ru")
    await update.message.reply_text(LANGUAGES[lang]["help_text"])


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    count = get_user_count()
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")


async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_user(user_id)

    lang = context.user_data.get("language", "ru")
    user_message = update.message.text

    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = []
    context.user_data["chat_history"].append({
        "role": "user",
        "content": user_message
    })

    chat_history = context.user_data["chat_history"][-10:]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model":
        "openai/gpt-3.5-turbo",
        "messages": [{
            "role": "system",
            "content": LANGUAGES[lang]["system_prompt"]
        }, *chat_history]
    }

    response = requests.post(OPENROUTER_URL, headers=headers, json=data)

    if response.status_code == 200:
        reply = response.json()["choices"][0]["message"]["content"]
        context.user_data["chat_history"].append({
            "role": "assistant",
            "content": reply
        })
    else:
        reply = LANGUAGES[lang]["response_error"]

    await update.message.reply_text(reply)


def main():
    init_db()
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^lang_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    print("ü§ñ –ë–æ—Ç –ê—Å–∞–ª –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
